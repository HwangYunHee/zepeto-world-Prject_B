fileFormatVersion: 2
guid: fca7624345a10ca449bb8b6e57496d74
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst __UnityEngine__ = require(\\\"UnityEngine\\\");\\r\\nconst
    UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst ZEPETO_Script_1 = require(\\\"ZEPETO.Script\\\");\\r\\nconst
    ZEPETO_Character_Controller_1 = require(\\\"ZEPETO.Character.Controller\\\");\\r\\nconst
    BlockMultiplay_1 = require(\\\"./BlockMultiplay\\\");\\r\\nclass MultiMovingBlock
    extends ZEPETO_Script_1.ZepetoScriptBehaviour {\\r\\n    constructor() {\\r\\n       
    super(...arguments);\\r\\n        this.timeToMove = 1;\\r\\n        this.isLocalPlayerOnBlock
    = false;\\r\\n        this.characterRotateAroundSpeed = -1;\\r\\n        // Multiplay
    Sync variables\\r\\n        this.isMultiplayMode = false;\\r\\n        this.myIdx
    = 0;\\r\\n        this.relativePosAtTryJump = UnityEngine_1.Vector3.zero;\\r\\n       
    this.syncCharacterRigidbodies = new Map();\\r\\n        this.clientElapsedTime
    = 0;\\r\\n        this.shouldFixTransform = false;\\r\\n        this.stopToDetectTriggerExit
    = false;\\r\\n        /* SetIsCharacterLandedOnBlock()\\r\\n           - Called
    when a character lands on a block.\\r\\n        */\\r\\n        this.isLocalCharacterLanded
    = false;\\r\\n    }\\r\\n    Start() {\\r\\n        this.moveDirection = 1;\\r\\n       
    this.prevDirection = -1;\\r\\n        this.rigidbody.useGravity = false;\\r\\n       
    this.rigidbody.isKinematic = false;\\r\\n        this.rigidbody.freezeRotation
    = true;\\r\\n        this.rigidbody.velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection);\\r\\n        this.startPosition = this.transform.position;\\r\\n       
    this.goalPosition = UnityEngine_1.Vector3.op_Addition(this.transform.position,
    UnityEngine_1.Vector3.op_Multiply(this.moveSpeed, this.timeToMove));\\r\\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(()
    => {\\r\\n            const myPlayer = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer;\\r\\n           
    this.localCharacter = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer.character;\\r\\n           
    this.localCharacterController = this.localCharacter.GetComponent($typeof(UnityEngine_1.CharacterController));\\r\\n       
    });\\r\\n        this.isLocalPlayerOnBlock = false;\\r\\n        this.isMultiplayMode
    = false;\\r\\n        this.renderer = this.GetComponentInChildren($typeof(UnityEngine_1.Renderer));\\r\\n   
    }\\r\\n    FixedUpdate() {\\r\\n        // Client Elapsed time\\r\\n        this.clientElapsedTime
    += UnityEngine_1.Time.fixedDeltaTime;\\r\\n        // Move the block based on
    the elapsed time in the room\\r\\n        this.MoveBlock(this.clientElapsedTime);\\r\\n       
    this.MoveLocalCharacterWithBlock();\\r\\n        if (false == this.isBlockRotating)\\r\\n           
    return;\\r\\n        // Block/Character Rotation\\r\\n        this.RotateBlock();\\r\\n       
    this.RotateCharacterWithBlock();\\r\\n    }\\r\\n    OnTriggerEnter(coll) {\\r\\n       
    if (__UnityEngine__.GameObject.op_Equality(coll.gameObject, this.localCharacter.gameObject))
    {\\r\\n            this.isLocalPlayerOnBlock = true;\\r\\n        }\\r\\n       
    else {\\r\\n            return;\\r\\n        }\\r\\n        if (false == this.isMultiplayMode)
    {\\r\\n            return;\\r\\n        }\\r\\n        // If the player is a
    local character, send a message to the server. (player.isOnBlock = true)\\r\\n       
    this.blockMultiplayManager?.SendOnBlockTriggerEnter(this.myIdx);\\r\\n    }\\r\\n   
    OnTriggerStay(coll) {\\r\\n        if (__UnityEngine__.GameObject.op_Inequality(coll.gameObject,
    this.localCharacter.gameObject)) {\\r\\n            return;\\r\\n        }\\r\\n       
    /* -------- Position Synchronization Logic --------*/\\r\\n        // Send a
    message when landing on floor\\r\\n        if (this.isLocalCharacterLanded) {\\r\\n           
    this.isLocalCharacterLanded = false;\\r\\n            if (this.isMultiplayMode)
    {\\r\\n                let relativeVector = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    this.localCharacter.transform.position);\\r\\n                this.blockMultiplayManager?.SendOnLandedBlock(this.myIdx,
    relativeVector);\\r\\n            }\\r\\n        }\\r\\n        // JUMP EVNET\\r\\n       
    if (this.localCharacter.CurrentState == ZEPETO_Character_Controller_1.CharacterState.JumpIdle
    || this.localCharacter.CurrentState == ZEPETO_Character_Controller_1.CharacterState.JumpMove)
    {\\r\\n            this.relativePosAtTryJump = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    this.localCharacter.transform.position);\\r\\n        }\\r\\n    }\\r\\n    OnTriggerExit(coll)
    {\\r\\n        if (__UnityEngine__.GameObject.op_Equality(coll.gameObject, this.localCharacter.gameObject))
    {\\r\\n            this.isLocalPlayerOnBlock = false;\\r\\n        }\\r\\n       
    else {\\r\\n            return;\\r\\n        }\\r\\n        if (false == this.isMultiplayMode
    || true == this.stopToDetectTriggerExit) {\\r\\n            return;\\r\\n       
    }\\r\\n        this.blockMultiplayManager?.SendOnBlockTriggerExit(this.myIdx,
    this.relativePosAtTryJump);\\r\\n    }\\r\\n    /* MoveCharacterWithBlock()\\r\\n      
    - Move the character along with the block\\r\\n    */\\r\\n    MoveLocalCharacterWithBlock()
    {\\r\\n        if (false == this.isLocalPlayerOnBlock)\\r\\n            return;\\r\\n       
    let velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed, this.moveDirection);\\r\\n       
    this.localCharacterController.Move(UnityEngine_1.Vector3.op_Multiply(velocity,
    UnityEngine_1.Time.fixedDeltaTime));\\r\\n    }\\r\\n    /* ChangeSyncCharacterVelocity()\\r\\n      
    - When the block velocity is changed, move the character to move at the same
    velocity\\r\\n    */\\r\\n    ChangeSyncCharacterVelocity() {\\r\\n        this.syncCharacterRigidbodies.forEach((rb,
    name) => {\\r\\n            rb.velocity = this.rigidbody.velocity;\\r\\n       
    });\\r\\n    }\\r\\n    /* RotateBlock()\\r\\n        - Rotate block if the block
    rotation option is on\\r\\n    */\\r\\n    RotateBlock() {\\r\\n        let deltaRotation
    = UnityEngine_1.Quaternion.Euler(UnityEngine_1.Vector3.op_Multiply(this.eulerAngleVelocity,
    UnityEngine_1.Time.fixedDeltaTime));\\r\\n        this.rigidbody.MoveRotation(UnityEngine_1.Quaternion.op_Multiply(this.rigidbody.rotation,
    deltaRotation));\\r\\n    }\\r\\n    /* RotateCharacterWithBlock()\\r\\n      
    - Rotate the character with the block if the block rotation option is on\\r\\n   
    */\\r\\n    RotateCharacterWithBlock() {\\r\\n        // Local Character rotation\\r\\n       
    if (this.isLocalPlayerOnBlock) {\\r\\n            this.localCharacter.transform.RotateAround(this.transform.position,
    UnityEngine_1.Vector3.down, this.characterRotateAroundSpeed);\\r\\n        }\\r\\n       
    // Multi Character rotation\\r\\n        this.syncCharacterRigidbodies.forEach((rb,
    name) => {\\r\\n            if (null != rb) {\\r\\n                rb.gameObject.transform.RotateAround(this.transform.position,
    UnityEngine_1.Vector3.down, this.characterRotateAroundSpeed);\\r\\n           
    }\\r\\n            else {\\r\\n                this.syncCharacterRigidbodies.delete(name);\\r\\n           
    }\\r\\n        });\\r\\n    }\\r\\n    // ----------------------------------
    Multiplay -----------------------------------\\r\\n    /* InitMultiplayMode()\\r\\n      
    - Resets the values for multiplayer sync when first entering or returning from
    the background.\\r\\n    */\\r\\n    InitMultiplayMode(elapsedTime) {\\r\\n       
    this.isMultiplayMode = true;\\r\\n        if (null == this.blockMultiplayManager)
    {\\r\\n            this.blockMultiplayManager = BlockMultiplay_1.default.GetInstance();\\r\\n       
    }\\r\\n        this.shouldFixTransform = true;\\r\\n        // Apply the predicted
    location based on server time for the first time\\r\\n        this.MoveBlock(elapsedTime);\\r\\n       
    // If the server time changes, the elapsed time of the client is also adjusted
    accordingly.\\r\\n        this.clientElapsedTime = elapsedTime;\\r\\n    }\\r\\n   
    /* CalculatePredictedPosition()\\r\\n       - Sets the movement direction of
    the block based on the time elapsed in the current server's room.\\r\\n    */\\r\\n   
    MoveBlock(elapsedTime) {\\r\\n        let predictedDir = (UnityEngine_1.Mathf.Floor(elapsedTime
    / this.timeToMove)) % 2 == 0 ? 1 : -1;\\r\\n        // movement direction assigned
    as predicted direction\\r\\n        this.moveDirection = predictedDir;\\r\\n       
    // If the velocity is different than the previous, then reapply\\r\\n       
    if (this.moveDirection != this.prevDirection) {\\r\\n            // Reapply movement
    speed.\\r\\n            this.rigidbody.velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection);\\r\\n            // Reapply the velocity of the other multiplay
    characters\\r\\n            this.ChangeSyncCharacterVelocity();\\r\\n       
    }\\r\\n        this.prevDirection = this.moveDirection;\\r\\n        // Adjust
    the location only when you log in for the first time and when you return from
    the background\\r\\n        if (this.shouldFixTransform) {\\r\\n            this.CalculatePredictedPosition(elapsedTime);\\r\\n       
    }\\r\\n    }\\r\\n    CalculatePredictedPosition(elapsedTime) {\\r\\n       
    this.shouldFixTransform = false;\\r\\n        let basePos = this.moveDirection
    == 1 ? this.startPosition : this.goalPosition;\\r\\n        let predictedPos
    = UnityEngine_1.Vector3.op_Addition(basePos, UnityEngine_1.Vector3.op_Multiply((UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection)), (elapsedTime % this.timeToMove)));\\r\\n        // Adjust
    block position\\r\\n        this.transform.position = predictedPos;\\r\\n       
    // Adjust Local/Multi character position\\r\\n        this.ResetCharactersTransform(predictedPos);\\r\\n   
    }\\r\\n    ResetCharactersTransform(predictedPos) {\\r\\n        // Local character
    position adjustment.\\r\\n        if (this.isLocalPlayerOnBlock) {\\r\\n           
    this.StartCoroutine(this.TeleportCharacter(predictedPos));\\r\\n        }\\r\\n       
    // Multi character position adjustment\\r\\n        this.syncCharacterRigidbodies.forEach((rb,
    name) => {\\r\\n            if (null != rb) {\\r\\n                let adjustValue
    = UnityEngine_1.Random.Range(-0.3, 0.3);\\r\\n                let characterPosition
    = new UnityEngine_1.Vector3(predictedPos.x + adjustValue, this.renderer.bounds.max.y,
    predictedPos.z + adjustValue);\\r\\n                rb.transform.position = characterPosition;\\r\\n               
    this.ChangeSyncCharacterVelocity();\\r\\n            }\\r\\n            else
    {\\r\\n                // If leaving while on top of a block\\r\\n               
    this.syncCharacterRigidbodies.delete(name);\\r\\n            }\\r\\n        });\\r\\n   
    }\\r\\n    /* TeleportCharacter()\\r\\n       - Move the character onto a block.\\r\\n   
    */\\r\\n    *TeleportCharacter(predictedPos) {\\r\\n        this.stopToDetectTriggerExit
    = true; // Ignore anything out of trigger during positioning\\r\\n        this.isLocalPlayerOnBlock
    = false; // To ensure that blocks don't carry characters while teleporting\\r\\n       
    while (true) {\\r\\n            yield null;\\r\\n            let targetPos =
    new UnityEngine_1.Vector3(predictedPos.x, this.renderer.bounds.max.y, predictedPos.z);\\r\\n           
    this.localCharacter.transform.position = targetPos;\\r\\n            if (UnityEngine_1.Vector3.op_Equality(this.localCharacter.transform.position,
    targetPos)) {\\r\\n                this.stopToDetectTriggerExit = false;\\r\\n               
    break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    /* AddCharacterOnBlock()\\r\\n      
    - Assign the character to be carried by the block.\\r\\n    */\\r\\n    AddCharacterOnBlock(sessionId,
    relativeVector, carrierParent) {\\r\\n        let position = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    relativeVector);\\r\\n        let result = new UnityEngine_1.Vector3(position.x,
    this.renderer.bounds.max.y, position.z);\\r\\n        carrierParent.position
    = result;\\r\\n        if (false == this.syncCharacterRigidbodies.has(sessionId))
    {\\r\\n            let rigidbody = carrierParent.GetComponent($typeof(UnityEngine_1.Rigidbody));\\r\\n           
    this.syncCharacterRigidbodies.set(sessionId, rigidbody);\\r\\n            //
    velocity intialization\\r\\n            rigidbody.velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection);\\r\\n        }\\r\\n    }\\r\\n    /* RemoveCharacterOnBlock()\\r\\n      
    - Remove the character from the carrier parent.\\r\\n    */\\r\\n    RemoveCharacterOnBlock(sessionId,
    relativePos, carrierParent) {\\r\\n        let position = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    relativePos);\\r\\n        carrierParent.position = position;\\r\\n        if
    (this.syncCharacterRigidbodies.has(sessionId)) {\\r\\n            // \uB098\uAC08
    \uB550 \uB2E4\uC2DC velocity\uB97C \uCD08\uAE30\uD654\\r\\n            this.syncCharacterRigidbodies.get(sessionId).velocity
    = UnityEngine_1.Vector3.zero;\\r\\n            this.syncCharacterRigidbodies.delete(sessionId);\\r\\n       
    }\\r\\n    }\\r\\n    /* HasPlayerInCarrierPool()\\r\\n       - Check if a specific
    character is on a block.\\r\\n    */\\r\\n    HasPlayerInCarrierPool(sessionId)
    {\\r\\n        if (this.syncCharacterRigidbodies.has(sessionId)) {\\r\\n           
    return true;\\r\\n        }\\r\\n        else {\\r\\n            return false;\\r\\n       
    }\\r\\n    }\\r\\n    SetIsCharacterLandedOnBlock() {\\r\\n        this.isLocalCharacterLanded
    = true;\\r\\n    }\\r\\n    /* SetBlockIdx()\\r\\n        - Sets the index of
    the current block to synchronize the position of the character on the block in
    multiplayer.\\r\\n    */\\r\\n    SetBlockIdx(idx) {\\r\\n        this.myIdx
    = idx;\\r\\n    }\\r\\n}\\r\\nexports.default = MultiMovingBlock;\\r\\n//# sourceMappingURL=data:application/json;base64,\",\"assetPath\":\"Assets/Scripts/Multiplay/MultiMovingBlock.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"UnityEngine.PhysicsModule\",\"name\":\"rigidbody\",\"type\":\"UnityEngine.Rigidbody\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Move
    Block\\\"\"]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"moveSpeed\",\"type\":\"UnityEngine.Vector3\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"timeToMove\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[\"1\"],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"isBlockRotating\",\"type\":\"System.Boolean\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Rotate
    Block (Option)\\\"\"]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"eulerAngleVelocity\",\"type\":\"UnityEngine.Vector3\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"characterRotateAroundSpeed\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]}],\"name\":\"MultiMovingBlock\",\"description\":\"\"},\"isCompiled\":true}"
  typescriptHash: 801f46083182183fdca378960ad9ebbc
  onlyWriteTrigger: 0
